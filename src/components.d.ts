/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface JdsInputText {
        /**
          * Disable input.
         */
        "disabled": boolean;
        /**
          * Set default masking state if `showMaskingIcon` is `true`.
         */
        "isMasked": boolean;
        "label": string;
        /**
          * Maximum input length
         */
        "maxlength": number;
        /**
          * Minimum input length
         */
        "minlength": number;
        /**
          * Input validation pattern
         */
        "pattern": string;
        /**
          * Input placeholder
         */
        "placeholder": string;
        /**
          * Icon on input leftmost
         */
        "prefixIcon": string;
        /**
          * Input value prefix
         */
        "prefixText": string;
        /**
          * Set input as readonly.
         */
        "readonly": boolean;
        /**
          * Masked input. Useful for input type password. Will override suffix icon if set to `true`;
         */
        "showMaskingIcon": boolean;
        /**
          * Icon on input rightmost. Won't show if `showMaskingIcon` is set to `true`.
         */
        "suffixIcon": string;
        /**
          * Input value suffix
         */
        "suffixText": string;
        /**
          * Validate value on `change` event. Default: validate value on `input` event.
         */
        "validateOnChange": boolean;
        /**
          * Input value
         */
        "value": string;
    }
}
declare global {
    interface HTMLJdsInputTextElement extends Components.JdsInputText, HTMLStencilElement {
    }
    var HTMLJdsInputTextElement: {
        prototype: HTMLJdsInputTextElement;
        new (): HTMLJdsInputTextElement;
    };
    interface HTMLElementTagNameMap {
        "jds-input-text": HTMLJdsInputTextElement;
    }
}
declare namespace LocalJSX {
    interface JdsInputText {
        /**
          * Disable input.
         */
        "disabled"?: boolean;
        /**
          * Set default masking state if `showMaskingIcon` is `true`.
         */
        "isMasked"?: boolean;
        "label"?: string;
        /**
          * Maximum input length
         */
        "maxlength"?: number;
        /**
          * Minimum input length
         */
        "minlength"?: number;
        /**
          * Emit custom event when prefix or suffix icon is clicked. Masking icon click event won't be emitted by this emitter.
         */
        "onIconClick"?: (event: CustomEvent<string>) => void;
        /**
          * Input validation pattern
         */
        "pattern"?: string;
        /**
          * Input placeholder
         */
        "placeholder"?: string;
        /**
          * Icon on input leftmost
         */
        "prefixIcon"?: string;
        /**
          * Input value prefix
         */
        "prefixText"?: string;
        /**
          * Set input as readonly.
         */
        "readonly"?: boolean;
        /**
          * Masked input. Useful for input type password. Will override suffix icon if set to `true`;
         */
        "showMaskingIcon"?: boolean;
        /**
          * Icon on input rightmost. Won't show if `showMaskingIcon` is set to `true`.
         */
        "suffixIcon"?: string;
        /**
          * Input value suffix
         */
        "suffixText"?: string;
        /**
          * Validate value on `change` event. Default: validate value on `input` event.
         */
        "validateOnChange"?: boolean;
        /**
          * Input value
         */
        "value"?: string;
    }
    interface IntrinsicElements {
        "jds-input-text": JdsInputText;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "jds-input-text": LocalJSX.JdsInputText & JSXBase.HTMLAttributes<HTMLJdsInputTextElement>;
        }
    }
}
